"use strict";var planFeatures=function(theFeatures){var features=[];for(var key in theFeatures)theFeatures.hasOwnProperty(key)&&features.push({name:key,value:theFeatures[key]});return features},cleanUpClusterCookies=function($cookies){$cookies.remove("selectedPlan")};angular.module("aerospike.stellar").controller("ClusterListController",["$scope","$interval","ClustersService",function($scope,$interval,Clusters){var setClusters=function(clusters){$scope.noClusters=!clusters||0===clusters.length,$scope.clusters=clusters};$scope.noClusters=!1,$scope.clusters=Clusters.index().$promise.then(function(clusters){setClusters(clusters)});var intervalFuncCluster=$interval(function(){Clusters.index().$promise.then(function(clusters){setClusters(clusters)},function(){})},5e3);$scope.$on("$destroy",function(){$interval.cancel(intervalFuncCluster)})}]),angular.module("aerospike.stellar").controller("ClusterDetailController",["$scope","$state","$stateParams","$interval","$modal","$cookieStore","flash","modalService","ClustersService","ClusterCommandsService","DbUsersService","SnapshotsService","NotificationsService",function($scope,$state,$stateParams,$interval,$modal,$cookies,flash,modalService,Clusters,ClusterCommands,DbUsers,Snapshots,Notifications){var setFailureFlash=function(message){flash.to("error-detail").error=message.data};$scope.cluster=Clusters.show({id:$stateParams.id}),$scope.dbUsers=DbUsers.index({id:$stateParams.id}),$scope.snapshots=Snapshots.index({clusterId:$stateParams.id}),$scope.allSnapshots=Snapshots.index({accountId:$cookies.get("accountId")}),$scope.notifications=Notifications.index({clusterId:$stateParams.id}),$scope.dropCluster=function(cluster){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Drop This Cluster",headerText:"Drop cluster `"+cluster.label+"`?",bodyText:"Are you sure you want to drop this cluster? This action is not reversible and and cannot be cancelled."};modalService.showModal({},modalOptions).then(function(){Clusters.destroy({id:$scope.cluster.id}).$promise.then(function(){$state.go("dashboard.clusters")},function(error){setFailureFlash(error.data)})})},$scope.saveAlerts=function(cluster){Clusters.save({id:$scope.cluster.id},cluster).$promise.then(function(){},function(err){flash.to("error-detail").error=err.data})},$scope.createDBUser=function(){var modalInstance=$modal.open({templateUrl:"/views/clusters/dbusers/createDBUser.html",controller:"CreateDBUserController"});modalInstance.result.then(function(){$scope.dbUsers=DbUsers.index({id:$stateParams.id})})},$scope.updateDatabaseUser=function(user){$scope.selectedDBUser=user;var modalInstance=$modal.open({templateUrl:"/views/clusters/dbusers/changeDBUserPassword.html",controller:"UpdateDBUserController",scope:$scope});modalInstance.result.then(function(){$scope.dbUsers=DbUsers.index({id:$stateParams.id})})},$scope.dropDatabaseUser=function(user){var modalOptions={closeButtonText:"Cancel",actionButtonText:"Drop This Database User",headerText:"Drop user `"+user.User+"`?",bodyText:"Are you sure you want to drop this user? This action is not reversible and and cannot be cancelled."};modalService.showModal({},modalOptions).then(function(){DbUsers.destroy({id:$stateParams.id,user_id:user.User}).$promise.then(function(){$scope.dbUsers=DbUsers.index({id:$stateParams.id})},function(error){flash.to("users-fail").error=error.data})})},$scope.backupDatabase=function(){var modalInstance=$modal.open({templateUrl:"/views/clusters/snapshots/snapshot-create.html",controller:"SnapshotCreateController",scope:$scope});modalInstance.result.then(function(){$scope.cluster=Clusters.show({id:$stateParams.id}),$scope.snapshots=Snapshots.index({clusterId:$stateParams.id})})},$scope.restoreDatabase=function(){var modalInstance=$modal.open({templateUrl:"/views/clusters/snapshots/snapshot-restore.html",controller:"SnapshotRestoreController",scope:$scope});modalInstance.result.then(function(){$scope.cluster=Clusters.show({id:$stateParams.id}),$scope.snapshots=Snapshots.index({clusterId:$stateParams.id})})};var oldStats=null,intervalFunc=$interval(function(){ClusterCommands.stats({id:$stateParams.id}).$promise.then(function(newStats){newStats!=oldStats&&(oldStats=newStats,$scope.stats=newStats)},function(){}),$scope.snapshots=Snapshots.index({clusterId:$stateParams.id}),Notifications.index({clusterId:$stateParams.id}).$promise.then(function(notifications){$scope.notifications.length!=notifications.length&&($scope.notifications=notifications)})},5e3),intervalFuncCluster=$interval(function(){Clusters.show({id:$stateParams.id}).$promise.then(function(cluster){$scope.cluster!=cluster&&(deepCompare($scope.cluster,cluster)&&($scope.cluster=cluster),DbUsers.index({id:$stateParams.id}).$promise.then(function(newUsers){newUsers&&newUsers.length!=$scope.dbUsers.length&&($scope.dbUsers=newUsers)}))},function(){})},5e3);$scope.$on("$destroy",function(){$interval.cancel(intervalFunc),$interval.cancel(intervalFuncCluster)})}]).controller("ClusterCreateController",["$scope","$stateParams","$interval","$cookieStore","ProvidersService","PlansService",function($scope,$stateParams,$interval,$cookies,Providers,Plans){$scope.currency="$",cleanUpClusterCookies($cookies),$scope.selectedPlan=null,$scope.replicationFactor=2,$scope.selectedProvider=null,$scope.selectedZone=null,$scope.dataInMem=!0,$scope.providers=Providers.index(),$scope.tabs=[{id:0,title:"Cache Plans",desc:"No Replication: All data also kept in memory.",dataInMem:!0,noReplicationFactor:!0},{id:1,title:"In-Memory",desc:"Maximum Performance: All data also kept in memory.",dataInMem:!0,noReplicationFactor:!0},{id:2,title:"Flash",desc:"Maximum Value: Only indexes in memory.",dataInMem:!1,noReplicationFactor:!0}],$scope.updateTabs=function(tab){if(!$scope.selectedTab||tab.id!=$scope.selectedTab.id){switch(tab.id){case 0:$scope.replicationFactor=1,$scope.selectedTab=tab;break;case 1:$scope.replicationFactor<2&&($scope.replicationFactor=2),$scope.selectedTab=tab;break;case 2:$scope.replicationFactor<2&&($scope.replicationFactor=2),$scope.selectedTab=tab}$scope.updatePlans($scope.selectedProvider)}},$scope.setupPlans=function(providers){providers.$promise.then(function(list){var newProvider=list[list.length-1];$scope.selectedProvider=newProvider,$scope.selectedZone=null,newProvider.zones&&newProvider.zones.length>0&&($scope.selectedZone=newProvider.zones[0]),$scope.updateTabs($scope.tabs[0])},function(){})},$scope.planFeatures=planFeatures,$scope.updatePlans=function(newProvider){if(null!==newProvider&&"undefined"!==newProvider){var planName="";$scope.selectedPlan&&(planName=$scope.selectedPlan.label),$scope.selectedPlan=null,$scope.features=[],$scope.selectedProvider=newProvider,$scope.plans=Plans.index({current_plan:"-",provider:$scope.selectedProvider.provider,region:$scope.selectedProvider.region,replicationFactor:$scope.replicationFactor,currency:$scope.currency,dataInMem:$scope.selectedTab.dataInMem}).$promise.then(function(plans){if(plans.length>0){var plan=null;if(""!==planName)for(var arrayLength=plans.length,i=0;arrayLength>i;i++)if(plans[i].label===planName){plan=plans[i];break}null===plan&&(plan=plans[0]),$scope.setPlan(plan),$scope.updateFeatures(plan)}$scope.plans=plans})}},$scope.updateFeatures=function(newPlan){null!==newPlan&&"undefined"!==newPlan&&($scope.selectedPlan=newPlan,$cookies.put("selectedPlan",newPlan),$scope.features=$scope.planFeatures(newPlan.features))},$scope.setPlan=function(newPlan){null!==newPlan&&"undefined"!=newPlan&&($scope.selectedPlan=newPlan,$scope.selectedPlan.replicationFactor=$scope.replicationFactor,$scope.selectedPlan.zone=$scope.selectedZone,$scope.features=$scope.planFeatures(newPlan.features),$cookies.put("selectedPlan",newPlan))}}]).controller("ClusterStep2CreateController",["$scope","$stateParams","$interval","$state","$cookieStore","ClustersService","SnapshotsService","flash",function($scope,$stateParams,$interval,$state,$cookies,ClustersService,SnapshotsService,flash){var d=new Date;d.setDate(d.getDate()-2),$scope.fromSnapshot=!1,$scope.currency="$",$scope.selectedPlan=$cookies.get("selectedPlan"),$scope.planFeatures=planFeatures($scope.selectedPlan.features),$scope.accountId=$cookies.get("accountId"),$scope.backups=SnapshotsService.index({accountId:$scope.accountId}),$scope.selectedBackup=null,$scope.form={planId:$scope.selectedPlan.id,accountId:$scope.accountId,zone:$scope.selectedPlan.zone,replicationFactor:$scope.selectedPlan.replicationFactor,whenFull:"stop-write",ttl:0};var setFailureFlash=function(message){flash.to("error-create").error=message};$scope.tabChanged=function(){$scope.fromSnapshot=!$scope.fromSnapshot},$scope.createCluster=function(clusterForm){ClustersService.create($.param({accountId:clusterForm.accountId,planId:clusterForm.planId,label:clusterForm.clusterName,namespace:clusterForm.namespace,dbAdminPassword:clusterForm.dbAdminPassword,replicationFactor:clusterForm.replicationFactor,whenFull:clusterForm.whenFull,ttl:clusterForm.ttl,zone:clusterForm.zone,snapshotId:$scope.selectedBackup?$scope.selectedBackup.id:null})).$promise.then(function(){cleanUpClusterCookies($cookies),$state.go("dashboard.clusters")},function(errorMessage){setFailureFlash(errorMessage.data)})}}]).controller("ClusterUpdateController",["$scope","$state","$stateParams","$interval","$cookieStore","flash","ProvidersService","PlansService","ClustersService",function($scope,$state,$stateParams,$interval,$cookies,flash,Providers,Plans,Clusters){var setFailureFlash=function(message){flash.to("error-detail").error=message};cleanUpClusterCookies($cookies),$scope.noUpgradesLeft=null,$scope.selectedPlan=null,$scope.currency="$",$scope.cluster=Clusters.show({id:$stateParams.id}).$promise.then(function(cluster){console.log(cluster),$scope.cluster=cluster,$scope.updatePlans($scope.cluster.plan.provider)}),$scope.planFeatures=planFeatures,$scope.updatePlans=function(newProvider){null!==newProvider&&"undefined"!==newProvider&&($scope.selectedPlan=null,$scope.features=[],$scope.selectedProvider=newProvider,$scope.plans=Plans.index({current_plan:$scope.cluster.plan.id,provider:$scope.cluster.plan.provider,region:$scope.cluster.plan.region,replicationFactor:$scope.cluster.replicationFactor,currency:$scope.currency,dataInMem:$scope.cluster.plan.dataInMemory}).$promise.then(function(plans){$scope.noUpgradesLeft=0===plans.length,plans.length>0&&($scope.setPlan(plans[0]),$scope.updateFeatures(plans[0])),$scope.plans=plans}))},$scope.updateFeatures=function(newPlan){null!==newPlan&&"undefined"!==newPlan&&($scope.selectedPlan=newPlan,$cookies.put("selectedPlan",newPlan),$scope.features=$scope.planFeatures(newPlan.features))},$scope.setPlan=function(newPlan){null!==newPlan&&"undefined"!=newPlan&&($scope.selectedPlan=newPlan,$scope.selectedPlan.replicationFactor=$scope.replicationFactor,$scope.features=$scope.planFeatures(newPlan.features),$cookies.put("selectedPlan",newPlan))},$scope.updateCluster=function(){Clusters.update({id:$stateParams.id},{planId:$scope.selectedPlan.id}).$promise.then(function(){cleanUpClusterCookies($cookies),$state.go("dashboard.clusters")},function(errorMessage){setFailureFlash(errorMessage.data)})},$scope.notImplemntedYet=function(){alert("Not implemented yet!")}}]);