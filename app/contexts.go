// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "amc": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/citrusleaf/amc/api_design
// --out=$(GOPATH)/src/github.com/citrusleaf/amc/temp
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// SystemAmcContext provides the amc system action context.
type SystemAmcContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSystemAmcContext parses the incoming request URL and body, performs validations and creates the
// context used by the amc controller system action.
func NewSystemAmcContext(ctx context.Context, r *http.Request, service *goa.Service) (*SystemAmcContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SystemAmcContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SystemAmcContext) OK(r *AerospikeAmcSystemResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.system.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SystemAmcContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AuthenticateAuthContext provides the auth authenticate action context.
type AuthenticateAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthenticateAuthPayload
}

// NewAuthenticateAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller authenticate action.
func NewAuthenticateAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthenticateAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthenticateAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// authenticateAuthPayload is the auth authenticate action payload.
type authenticateAuthPayload struct {
	// AMC User's Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// AMC User Name (this is not the same as Database user name)
	User *string `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *authenticateAuthPayload) Validate() (err error) {
	if payload.User == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates AuthenticateAuthPayload from authenticateAuthPayload
func (payload *authenticateAuthPayload) Publicize() *AuthenticateAuthPayload {
	var pub AuthenticateAuthPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.User != nil {
		pub.User = *payload.User
	}
	return &pub
}

// AuthenticateAuthPayload is the auth authenticate action payload.
type AuthenticateAuthPayload struct {
	// AMC User's Password
	Password string `form:"password" json:"password" xml:"password"`
	// AMC User Name (this is not the same as Database user name)
	User string `form:"user" json:"user" xml:"user"`
}

// Validate runs the validation rules defined in the design.
func (payload *AuthenticateAuthPayload) Validate() (err error) {
	if payload.User == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AuthenticateAuthContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AuthenticateAuthContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *AuthenticateAuthContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthenticateAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LogoutAuthContext provides the auth logout action context.
type LogoutAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller logout action.
func NewLogoutAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutAuthContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LogoutAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteConnectionContext provides the connection delete action context.
type DeleteConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller delete action.
func NewDeleteConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteConnectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryConnectionContext provides the connection query action context.
type QueryConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller query action.
func NewQueryConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryConnectionContext) OK(r []*AerospikeAmcConnectionQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveConnectionContext provides the connection save action context.
type SaveConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SaveConnectionPayload
}

// NewSaveConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller save action.
func NewSaveConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// saveConnectionPayload is the connection save action payload.
type saveConnectionPayload struct {
	// Connection Id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Connection Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Seeds
	Seeds []*nodeSeed `form:"seeds,omitempty" json:"seeds,omitempty" xml:"seeds,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveConnectionPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates SaveConnectionPayload from saveConnectionPayload
func (payload *saveConnectionPayload) Publicize() *SaveConnectionPayload {
	var pub SaveConnectionPayload
	if payload.ID != nil {
		pub.ID = payload.ID
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Seeds != nil {
		pub.Seeds = make([]*NodeSeed, len(payload.Seeds))
		for i2, elem2 := range payload.Seeds {
			pub.Seeds[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// SaveConnectionPayload is the connection save action payload.
type SaveConnectionPayload struct {
	// Connection Id
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Connection Name
	Name string `form:"name" json:"name" xml:"name"`
	// Seeds
	Seeds []*NodeSeed `form:"seeds" json:"seeds" xml:"seeds"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveConnectionPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SaveConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveConnectionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
