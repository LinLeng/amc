// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "amc": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/citrusleaf/amc/api_design
// --out=$(GOPATH)/src/github.com/citrusleaf/amc
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// SystemAmcContext provides the amc system action context.
type SystemAmcContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSystemAmcContext parses the incoming request URL and body, performs validations and creates the
// context used by the amc controller system action.
func NewSystemAmcContext(ctx context.Context, r *http.Request, service *goa.Service) (*SystemAmcContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SystemAmcContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SystemAmcContext) OK(r *AerospikeAmcSystemResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.system.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SystemAmcContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AuthenticateAuthContext provides the auth authenticate action context.
type AuthenticateAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthenticateAuthPayload
}

// NewAuthenticateAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller authenticate action.
func NewAuthenticateAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthenticateAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthenticateAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// authenticateAuthPayload is the auth authenticate action payload.
type authenticateAuthPayload struct {
	// AMC User's Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// AMC User Name (this is not the same as Database user name)
	User *string `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *authenticateAuthPayload) Validate() (err error) {
	if payload.User == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates AuthenticateAuthPayload from authenticateAuthPayload
func (payload *authenticateAuthPayload) Publicize() *AuthenticateAuthPayload {
	var pub AuthenticateAuthPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.User != nil {
		pub.User = *payload.User
	}
	return &pub
}

// AuthenticateAuthPayload is the auth authenticate action payload.
type AuthenticateAuthPayload struct {
	// AMC User's Password
	Password string `form:"password" json:"password" xml:"password"`
	// AMC User Name (this is not the same as Database user name)
	User string `form:"user" json:"user" xml:"user"`
}

// Validate runs the validation rules defined in the design.
func (payload *AuthenticateAuthPayload) Validate() (err error) {
	if payload.User == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AuthenticateAuthContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AuthenticateAuthContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *AuthenticateAuthContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthenticateAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ConfigConnectionContext provides the connection config action context.
type ConfigConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewConfigConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller config action.
func NewConfigConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConfigConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConfigConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ConfigConnectionContext) OK(r map[string]*AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConfigConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConfigConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConfigConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ConfigConnectionContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// ConnectConnectionContext provides the connection connect action context.
type ConnectConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *ConnectConnectionPayload
}

// NewConnectConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller connect action.
func NewConnectConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConnectConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConnectConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// connectConnectionPayload is the connection connect action payload.
type connectConnectionPayload struct {
	// Database User's Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Database Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *connectConnectionPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates ConnectConnectionPayload from connectConnectionPayload
func (payload *connectConnectionPayload) Publicize() *ConnectConnectionPayload {
	var pub ConnectConnectionPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// ConnectConnectionPayload is the connection connect action payload.
type ConnectConnectionPayload struct {
	// Database User's Password
	Password string `form:"password" json:"password" xml:"password"`
	// Database Username
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *ConnectConnectionPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *ConnectConnectionContext) OK(r *AerospikeAmcConnectionTreeResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.tree.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConnectConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConnectConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ConnectConnectionContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConnectConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteConnectionContext provides the connection delete action context.
type DeleteConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewDeleteConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller delete action.
func NewDeleteConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteConnectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NamespacesConnectionContext provides the connection namespaces action context.
type NamespacesConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewNamespacesConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller namespaces action.
func NewNamespacesConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*NamespacesConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NamespacesConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NamespacesConnectionContext) OK(r map[string]*AerospikeAmcClusterNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NamespacesConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *NamespacesConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *NamespacesConnectionContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *NamespacesConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryConnectionContext provides the connection query action context.
type QueryConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller query action.
func NewQueryConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryConnectionContext) OK(r []*AerospikeAmcConnectionQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveConnectionContext provides the connection save action context.
type SaveConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SaveConnectionPayload
}

// NewSaveConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller save action.
func NewSaveConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// saveConnectionPayload is the connection save action payload.
type saveConnectionPayload struct {
	// Connection Id
	ConnID *string `form:"connId,omitempty" json:"connId,omitempty" xml:"connId,omitempty"`
	// Should AMC connect to this cluster automatically after user login?
	ConnectOnLogin *bool `form:"connectOnLogin,omitempty" json:"connectOnLogin,omitempty" xml:"connectOnLogin,omitempty"`
	// Connection Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Seeds
	Seeds []*nodeSeed `form:"seeds,omitempty" json:"seeds,omitempty" xml:"seeds,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveConnectionPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	if payload.ConnID != nil {
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, *payload.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.connId`, *payload.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates SaveConnectionPayload from saveConnectionPayload
func (payload *saveConnectionPayload) Publicize() *SaveConnectionPayload {
	var pub SaveConnectionPayload
	if payload.ConnID != nil {
		pub.ConnID = payload.ConnID
	}
	if payload.ConnectOnLogin != nil {
		pub.ConnectOnLogin = payload.ConnectOnLogin
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Seeds != nil {
		pub.Seeds = make([]*NodeSeed, len(payload.Seeds))
		for i2, elem2 := range payload.Seeds {
			pub.Seeds[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// SaveConnectionPayload is the connection save action payload.
type SaveConnectionPayload struct {
	// Connection Id
	ConnID *string `form:"connId,omitempty" json:"connId,omitempty" xml:"connId,omitempty"`
	// Should AMC connect to this cluster automatically after user login?
	ConnectOnLogin *bool `form:"connectOnLogin,omitempty" json:"connectOnLogin,omitempty" xml:"connectOnLogin,omitempty"`
	// Connection Name
	Name string `form:"name" json:"name" xml:"name"`
	// Seeds
	Seeds []*NodeSeed `form:"seeds" json:"seeds" xml:"seeds"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveConnectionPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	if payload.ConnID != nil {
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, *payload.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.connId`, *payload.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SaveConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveConnectionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SetConfigConnectionContext provides the connection set config action context.
type SetConfigConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SetConfigConnectionPayload
}

// NewSetConfigConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller set config action.
func NewSetConfigConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetConfigConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetConfigConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// setConfigConnectionPayload is the connection set config action payload.
type setConfigConnectionPayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig,omitempty" json:"newConfig,omitempty" xml:"newConfig,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *setConfigConnectionPayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// Publicize creates SetConfigConnectionPayload from setConfigConnectionPayload
func (payload *setConfigConnectionPayload) Publicize() *SetConfigConnectionPayload {
	var pub SetConfigConnectionPayload
	if payload.NewConfig != nil {
		pub.NewConfig = payload.NewConfig
	}
	return &pub
}

// SetConfigConnectionPayload is the connection set config action payload.
type SetConfigConnectionPayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig" json:"newConfig" xml:"newConfig"`
}

// Validate runs the validation rules defined in the design.
func (payload *SetConfigConnectionPayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SetConfigConnectionContext) OK(r map[string]*AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetConfigConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetConfigConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SetConfigConnectionContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetConfigConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowConnectionContext provides the connection show action context.
type ShowConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewShowConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller show action.
func NewShowConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowConnectionContext) OK(r *AerospikeAmcConnectionResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputConnectionContext provides the connection throughput action context.
type ThroughputConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Until  *int
}

// NewThroughputConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller throughput action.
func NewThroughputConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp2 := from
			tmp1 := &tmp2
			rctx.From = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp4 := until
			tmp3 := &tmp4
			rctx.Until = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputConnectionContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropIndexContext provides the index drop action context.
type DropIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Name    string
	Payload *DropIndexPayload
}

// NewDropIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller drop action.
func NewDropIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// dropIndexPayload is the index drop action payload.
type dropIndexPayload struct {
	// Index's Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Index's Set Name
	SetName *string `form:"setName,omitempty" json:"setName,omitempty" xml:"setName,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *dropIndexPayload) Validate() (err error) {
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	return
}

// Publicize creates DropIndexPayload from dropIndexPayload
func (payload *dropIndexPayload) Publicize() *DropIndexPayload {
	var pub DropIndexPayload
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.SetName != nil {
		pub.SetName = *payload.SetName
	}
	return &pub
}

// DropIndexPayload is the index drop action payload.
type DropIndexPayload struct {
	// Index's Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Index's Set Name
	SetName string `form:"setName" json:"setName" xml:"setName"`
}

// Validate runs the validation rules defined in the design.
func (payload *DropIndexPayload) Validate() (err error) {
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropIndexContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryIndexContext provides the index query action context.
type QueryIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID       string
	IncludeStats bool
}

// NewQueryIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller query action.
func NewQueryIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramIncludeStats := req.Params["includeStats"]
	if len(paramIncludeStats) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("includeStats"))
	} else {
		rawIncludeStats := paramIncludeStats[0]
		if includeStats, err2 := strconv.ParseBool(rawIncludeStats); err2 == nil {
			rctx.IncludeStats = includeStats
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("includeStats", rawIncludeStats, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryIndexContext) OK(r *AerospikeAmcIndexWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.index.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryIndexContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveIndexContext provides the index save action context.
type SaveIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SaveIndexPayload
}

// NewSaveIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller save action.
func NewSaveIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// saveIndexPayload is the index save action payload.
type saveIndexPayload struct {
	// Index's Bin name
	BinName *string `form:"binName,omitempty" json:"binName,omitempty" xml:"binName,omitempty"`
	// Index's Name
	IndexName *string `form:"indexName,omitempty" json:"indexName,omitempty" xml:"indexName,omitempty"`
	// Index's Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Index's Set name
	SetName *string `form:"setName,omitempty" json:"setName,omitempty" xml:"setName,omitempty"`
	// Index's type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveIndexPayload) Validate() (err error) {
	if payload.IndexName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "indexName"))
	}
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	if payload.BinName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "binName"))
	}
	if payload.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if payload.Type != nil {
		if ok := goa.ValidatePattern(`(?i)[NUMERIC|STRING]`, *payload.Type); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, *payload.Type, `(?i)[NUMERIC|STRING]`))
		}
	}
	return
}

// Publicize creates SaveIndexPayload from saveIndexPayload
func (payload *saveIndexPayload) Publicize() *SaveIndexPayload {
	var pub SaveIndexPayload
	if payload.BinName != nil {
		pub.BinName = *payload.BinName
	}
	if payload.IndexName != nil {
		pub.IndexName = *payload.IndexName
	}
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.SetName != nil {
		pub.SetName = *payload.SetName
	}
	if payload.Type != nil {
		pub.Type = *payload.Type
	}
	return &pub
}

// SaveIndexPayload is the index save action payload.
type SaveIndexPayload struct {
	// Index's Bin name
	BinName string `form:"binName" json:"binName" xml:"binName"`
	// Index's Name
	IndexName string `form:"indexName" json:"indexName" xml:"indexName"`
	// Index's Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Index's Set name
	SetName string `form:"setName" json:"setName" xml:"setName"`
	// Index's type
	Type string `form:"type" json:"type" xml:"type"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveIndexPayload) Validate() (err error) {
	if payload.IndexName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "indexName"))
	}
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	if payload.BinName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "binName"))
	}
	if payload.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if ok := goa.ValidatePattern(`(?i)[NUMERIC|STRING]`, payload.Type); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, payload.Type, `(?i)[NUMERIC|STRING]`))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SaveIndexContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *SaveIndexContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowIndexContext provides the index show action context.
type ShowIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewShowIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller show action.
func NewShowIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowIndexContext) OK(r *AerospikeAmcIndexWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.index.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropModuleContext provides the module drop action context.
type DropModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewDropModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller drop action.
func NewDropModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropModuleContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryModuleContext provides the module query action context.
type QueryModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewQueryModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller query action.
func NewQueryModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryModuleContext) OK(r []*AerospikeAmcConnectionModulesResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryModuleContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveModuleContext provides the module save action context.
type SaveModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SaveModulePayload
}

// NewSaveModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller save action.
func NewSaveModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// saveModulePayload is the module save action payload.
type saveModulePayload struct {
	// Module's Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Module's Source Code
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Module's type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveModulePayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Source == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if payload.Type != nil {
		if ok := goa.ValidatePattern(`(?i)LUA`, *payload.Type); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, *payload.Type, `(?i)LUA`))
		}
	}
	return
}

// Publicize creates SaveModulePayload from saveModulePayload
func (payload *saveModulePayload) Publicize() *SaveModulePayload {
	var pub SaveModulePayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Source != nil {
		pub.Source = *payload.Source
	}
	if payload.Type != nil {
		pub.Type = *payload.Type
	}
	return &pub
}

// SaveModulePayload is the module save action payload.
type SaveModulePayload struct {
	// Module's Name
	Name string `form:"name" json:"name" xml:"name"`
	// Module's Source Code
	Source string `form:"source" json:"source" xml:"source"`
	// Module's type
	Type string `form:"type" json:"type" xml:"type"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveModulePayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Source == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if ok := goa.ValidatePattern(`(?i)LUA`, payload.Type); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, payload.Type, `(?i)LUA`))
	}
	return
}

// OKFull sends a HTTP response with status code 200.
func (ctx *SaveModuleContext) OKFull(r *AerospikeAmcConnectionModulesResponseFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.modules.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *SaveModuleContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowModuleContext provides the module show action context.
type ShowModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewShowModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller show action.
func NewShowModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowModuleContext) OKFull(r *AerospikeAmcConnectionModulesResponseFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.modules.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LatencyNamespaceContext provides the namespace latency action context.
type LatencyNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      *int
	Namespace string
	Node      string
	Until     *int
}

// NewLatencyNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller latency action.
func NewLatencyNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp7 := from
			tmp6 := &tmp7
			rctx.From = tmp6
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp9 := until
			tmp8 := &tmp9
			rctx.Until = tmp8
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyNamespaceContext) OK(r map[string]*AerospikeAmcLatencyResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *LatencyNamespaceContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// QueryNamespaceContext provides the namespace query action context.
type QueryNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewQueryNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller query action.
func NewQueryNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryNamespaceContext) OK(r map[string]*AerospikeAmcNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryNamespaceContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowNamespaceContext provides the namespace show action context.
type ShowNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewShowNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller show action.
func NewShowNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNamespaceContext) OK(r *AerospikeAmcNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.namespace.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ShowNamespaceContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputNamespaceContext provides the namespace throughput action context.
type ThroughputNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      *int
	Namespace string
	Node      string
	Until     *int
}

// NewThroughputNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller throughput action.
func NewThroughputNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp11 := from
			tmp10 := &tmp11
			rctx.From = tmp10
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp13 := until
			tmp12 := &tmp13
			rctx.Until = tmp12
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputNamespaceContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ConfigNodeContext provides the node config action context.
type ConfigNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewConfigNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller config action.
func NewConfigNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConfigNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConfigNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ConfigNodeContext) OK(r *AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.node.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConfigNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConfigNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConfigNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ConfigNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// LatencyNodeContext provides the node latency action context.
type LatencyNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Node   string
	Until  *int
}

// NewLatencyNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller latency action.
func NewLatencyNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp15 := from
			tmp14 := &tmp15
			rctx.From = tmp14
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp17 := until
			tmp16 := &tmp17
			rctx.Until = tmp16
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyNodeContext) OK(r map[string]*AerospikeAmcLatencyResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *LatencyNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// SetConfigNodeContext provides the node set config action context.
type SetConfigNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Node    string
	Payload *SetConfigNodePayload
}

// NewSetConfigNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller set config action.
func NewSetConfigNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetConfigNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetConfigNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// setConfigNodePayload is the node set config action payload.
type setConfigNodePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig,omitempty" json:"newConfig,omitempty" xml:"newConfig,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *setConfigNodePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// Publicize creates SetConfigNodePayload from setConfigNodePayload
func (payload *setConfigNodePayload) Publicize() *SetConfigNodePayload {
	var pub SetConfigNodePayload
	if payload.NewConfig != nil {
		pub.NewConfig = payload.NewConfig
	}
	return &pub
}

// SetConfigNodePayload is the node set config action payload.
type SetConfigNodePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig" json:"newConfig" xml:"newConfig"`
}

// Validate runs the validation rules defined in the design.
func (payload *SetConfigNodePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SetConfigNodeContext) OK(r *AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.node.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetConfigNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetConfigNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SetConfigNodeContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetConfigNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowNodeContext provides the node show action context.
type ShowNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewShowNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller show action.
func NewShowNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNodeContext) OK(r map[string]*AerospikeAmcNodeResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputNodeContext provides the node throughput action context.
type ThroughputNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Node   string
	Until  *int
}

// NewThroughputNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller throughput action.
func NewThroughputNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp19 := from
			tmp18 := &tmp19
			rctx.From = tmp18
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp21 := until
			tmp20 := &tmp21
			rctx.Until = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputNodeContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropSetContext provides the set drop action context.
type DropSetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
	SetName   string
}

// NewDropSetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller drop action.
func NewDropSetContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropSetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropSetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramSetName := req.Params["setName"]
	if len(paramSetName) > 0 {
		rawSetName := paramSetName[0]
		rctx.SetName = rawSetName
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropSetContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropSetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropSetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropSetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QuerySetContext provides the set query action context.
type QuerySetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewQuerySetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller query action.
func NewQuerySetContext(ctx context.Context, r *http.Request, service *goa.Service) (*QuerySetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QuerySetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QuerySetContext) OK(r []map[string]interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QuerySetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QuerySetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QuerySetContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QuerySetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowSetContext provides the set show action context.
type ShowSetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
	SetName   string
}

// NewShowSetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller show action.
func NewShowSetContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramSetName := req.Params["setName"]
	if len(paramSetName) > 0 {
		rawSetName := paramSetName[0]
		rctx.SetName = rawSetName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSetContext) OK(r map[string]interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowSetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.user.query.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryUserContext provides the user query action context.
type QueryUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller query action.
func NewQueryUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryUserContext) OK(r []*AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveUserContext provides the user save action context.
type SaveUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SaveUserPayload
}

// NewSaveUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller save action.
func NewSaveUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// saveUserPayload is the user save action payload.
type saveUserPayload struct {
	// User account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// User's fullname
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Additional Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Valid roles are: admin, ops, dev
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
	// AMC User Id
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// Publicize creates SaveUserPayload from saveUserPayload
func (payload *saveUserPayload) Publicize() *SaveUserPayload {
	var pub SaveUserPayload
	if payload.Active != nil {
		pub.Active = payload.Active
	}
	if payload.FullName != nil {
		pub.FullName = payload.FullName
	}
	if payload.Notes != nil {
		pub.Notes = payload.Notes
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.Roles != nil {
		pub.Roles = payload.Roles
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SaveUserPayload is the user save action payload.
type SaveUserPayload struct {
	// User account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// User's fullname
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Additional Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Valid roles are: admin, ops, dev
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// AMC User Id
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SaveUserContext) OK(r *AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.user.query.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
