// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "amc": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/citrusleaf/amc/api_design
// --out=$(GOPATH)/src/github.com/citrusleaf/amc
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// SystemAmcContext provides the amc system action context.
type SystemAmcContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSystemAmcContext parses the incoming request URL and body, performs validations and creates the
// context used by the amc controller system action.
func NewSystemAmcContext(ctx context.Context, r *http.Request, service *goa.Service) (*SystemAmcContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SystemAmcContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SystemAmcContext) OK(r *AerospikeAmcSystemResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.system.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SystemAmcContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AuthenticateAuthContext provides the auth authenticate action context.
type AuthenticateAuthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AuthenticateAuthPayload
}

// NewAuthenticateAuthContext parses the incoming request URL and body, performs validations and creates the
// context used by the auth controller authenticate action.
func NewAuthenticateAuthContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthenticateAuthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthenticateAuthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// authenticateAuthPayload is the auth authenticate action payload.
type authenticateAuthPayload struct {
	// AMC User's Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// AMC User Name (this is not the same as Database user name)
	User *string `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *authenticateAuthPayload) Validate() (err error) {
	if payload.User == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates AuthenticateAuthPayload from authenticateAuthPayload
func (payload *authenticateAuthPayload) Publicize() *AuthenticateAuthPayload {
	var pub AuthenticateAuthPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.User != nil {
		pub.User = *payload.User
	}
	return &pub
}

// AuthenticateAuthPayload is the auth authenticate action payload.
type AuthenticateAuthPayload struct {
	// AMC User's Password
	Password string `form:"password" json:"password" xml:"password"`
	// AMC User Name (this is not the same as Database user name)
	User string `form:"user" json:"user" xml:"user"`
}

// Validate runs the validation rules defined in the design.
func (payload *AuthenticateAuthPayload) Validate() (err error) {
	if payload.User == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "user"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AuthenticateAuthContext) OK(r *AerospikeAmcAuthResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.auth.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AuthenticateAuthContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *AuthenticateAuthContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthenticateAuthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateBackupContext provides the backup create action context.
type CreateBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *CreateBackupPayload
}

// NewCreateBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller create action.
func NewCreateBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// createBackupPayload is the backup create action payload.
type createBackupPayload struct {
	// SSH user's password
	SSHPassword *string `form:"SSHPassword,omitempty" json:"SSHPassword,omitempty" xml:"SSHPassword,omitempty"`
	// SSH User
	SSHUser *string `form:"SSHUser,omitempty" json:"SSHUser,omitempty" xml:"SSHUser,omitempty"`
	// Host on which the backup was created
	DestinationAddress *string `form:"destinationAddress,omitempty" json:"destinationAddress,omitempty" xml:"destinationAddress,omitempty"`
	// Directory where the backup was created
	DestinationPath *string `form:"destinationPath,omitempty" json:"destinationPath,omitempty" xml:"destinationPath,omitempty"`
	// Indicated whether the backup was created only for the metadata
	MetadataOnly *bool `form:"metadataOnly,omitempty" json:"metadataOnly,omitempty" xml:"metadataOnly,omitempty"`
	// Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Prioity of the scan reading the data for the backup. 0 (auto), 1 (low), 2 (medium), 3 (high).
	ScanPriority *int `form:"scanPriority,omitempty" json:"scanPriority,omitempty" xml:"scanPriority,omitempty"`
	// Sets from which backup was created
	Sets *string `form:"sets,omitempty" json:"sets,omitempty" xml:"sets,omitempty"`
	// Indicates whether the backup was supposed to be terminated in case the cluster experienced a change in its nodes
	TerminateOnClusterChange *bool `form:"terminateOnClusterChange,omitempty" json:"terminateOnClusterChange,omitempty" xml:"terminateOnClusterChange,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createBackupPayload) Validate() (err error) {
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.DestinationAddress == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "destinationAddress"))
	}
	if payload.DestinationPath == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "destinationPath"))
	}
	if payload.Sets == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sets"))
	}
	if payload.MetadataOnly == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "metadataOnly"))
	}
	if payload.TerminateOnClusterChange == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "terminateOnClusterChange"))
	}
	if payload.ScanPriority == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "scanPriority"))
	}
	if payload.SSHUser == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHUser"))
	}
	if payload.SSHPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHPassword"))
	}
	return
}

// Publicize creates CreateBackupPayload from createBackupPayload
func (payload *createBackupPayload) Publicize() *CreateBackupPayload {
	var pub CreateBackupPayload
	if payload.SSHPassword != nil {
		pub.SSHPassword = *payload.SSHPassword
	}
	if payload.SSHUser != nil {
		pub.SSHUser = *payload.SSHUser
	}
	if payload.DestinationAddress != nil {
		pub.DestinationAddress = *payload.DestinationAddress
	}
	if payload.DestinationPath != nil {
		pub.DestinationPath = *payload.DestinationPath
	}
	if payload.MetadataOnly != nil {
		pub.MetadataOnly = *payload.MetadataOnly
	}
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.ScanPriority != nil {
		pub.ScanPriority = *payload.ScanPriority
	}
	if payload.Sets != nil {
		pub.Sets = *payload.Sets
	}
	if payload.TerminateOnClusterChange != nil {
		pub.TerminateOnClusterChange = *payload.TerminateOnClusterChange
	}
	return &pub
}

// CreateBackupPayload is the backup create action payload.
type CreateBackupPayload struct {
	// SSH user's password
	SSHPassword string `form:"SSHPassword" json:"SSHPassword" xml:"SSHPassword"`
	// SSH User
	SSHUser string `form:"SSHUser" json:"SSHUser" xml:"SSHUser"`
	// Host on which the backup was created
	DestinationAddress string `form:"destinationAddress" json:"destinationAddress" xml:"destinationAddress"`
	// Directory where the backup was created
	DestinationPath string `form:"destinationPath" json:"destinationPath" xml:"destinationPath"`
	// Indicated whether the backup was created only for the metadata
	MetadataOnly bool `form:"metadataOnly" json:"metadataOnly" xml:"metadataOnly"`
	// Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Prioity of the scan reading the data for the backup. 0 (auto), 1 (low), 2 (medium), 3 (high).
	ScanPriority int `form:"scanPriority" json:"scanPriority" xml:"scanPriority"`
	// Sets from which backup was created
	Sets string `form:"sets" json:"sets" xml:"sets"`
	// Indicates whether the backup was supposed to be terminated in case the cluster experienced a change in its nodes
	TerminateOnClusterChange bool `form:"terminateOnClusterChange" json:"terminateOnClusterChange" xml:"terminateOnClusterChange"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateBackupPayload) Validate() (err error) {
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.DestinationAddress == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "destinationAddress"))
	}
	if payload.DestinationPath == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "destinationPath"))
	}
	if payload.Sets == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sets"))
	}

	if payload.SSHUser == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHUser"))
	}
	if payload.SSHPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHPassword"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateBackupContext) OK(r *AerospikeAmcBackupResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.backup.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateBackupContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateBackupContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateBackupContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ProgressBackupContext provides the backup progress action context.
type ProgressBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewProgressBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller progress action.
func NewProgressBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProgressBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProgressBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProgressBackupContext) OK(r *AerospikeAmcBackupResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.backup.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProgressBackupContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ProgressBackupContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ProgressBackupContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ProgressBackupContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryBackupContext provides the backup query action context.
type QueryBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewQueryBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller query action.
func NewQueryBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryBackupContext) OK(r []*AerospikeAmcBackupResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryBackupContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryBackupContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryBackupContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowBackupContext provides the backup show action context.
type ShowBackupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BackupID string
	ConnID   string
}

// NewShowBackupContext parses the incoming request URL and body, performs validations and creates the
// context used by the backup controller show action.
func NewShowBackupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowBackupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowBackupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBackupID := req.Params["backupId"]
	if len(paramBackupID) > 0 {
		rawBackupID := paramBackupID[0]
		rctx.BackupID = rawBackupID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.BackupID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`backupId`, rctx.BackupID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowBackupContext) OK(r *AerospikeAmcBackupResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.backup.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowBackupContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowBackupContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowBackupContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AddNodeConnectionContext provides the connection add-node action context.
type AddNodeConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *AddNodeConnectionPayload
}

// NewAddNodeConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller add-node action.
func NewAddNodeConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddNodeConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddNodeConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// addNodeConnectionPayload is the connection add-node action payload.
type addNodeConnectionPayload struct {
	// New Node Seed
	Node *nodeSeed `form:"node,omitempty" json:"node,omitempty" xml:"node,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *addNodeConnectionPayload) Validate() (err error) {
	if payload.Node == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "node"))
	}
	if payload.Node != nil {
		if err2 := payload.Node.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates AddNodeConnectionPayload from addNodeConnectionPayload
func (payload *addNodeConnectionPayload) Publicize() *AddNodeConnectionPayload {
	var pub AddNodeConnectionPayload
	if payload.Node != nil {
		pub.Node = payload.Node.Publicize()
	}
	return &pub
}

// AddNodeConnectionPayload is the connection add-node action payload.
type AddNodeConnectionPayload struct {
	// New Node Seed
	Node *NodeSeed `form:"node" json:"node" xml:"node"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddNodeConnectionPayload) Validate() (err error) {
	if payload.Node == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "node"))
	}
	if payload.Node != nil {
		if err2 := payload.Node.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddNodeConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddNodeConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AddNodeConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddNodeConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// AqlConnectionContext provides the connection aql action context.
type AqlConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *AqlConnectionPayload
}

// NewAqlConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller aql action.
func NewAqlConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*AqlConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AqlConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// aqlConnectionPayload is the connection aql action payload.
type aqlConnectionPayload struct {
	// AQL command
	Aql *string `form:"aql,omitempty" json:"aql,omitempty" xml:"aql,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *aqlConnectionPayload) Validate() (err error) {
	if payload.Aql == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "aql"))
	}
	return
}

// Publicize creates AqlConnectionPayload from aqlConnectionPayload
func (payload *aqlConnectionPayload) Publicize() *AqlConnectionPayload {
	var pub AqlConnectionPayload
	if payload.Aql != nil {
		pub.Aql = *payload.Aql
	}
	return &pub
}

// AqlConnectionPayload is the connection aql action payload.
type AqlConnectionPayload struct {
	// AQL command
	Aql string `form:"aql" json:"aql" xml:"aql"`
}

// Validate runs the validation rules defined in the design.
func (payload *AqlConnectionPayload) Validate() (err error) {
	if payload.Aql == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "aql"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AqlConnectionContext) OK(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AqlConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *AqlConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *AqlConnectionContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AqlConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CheckAqlUDFConnectionContext provides the connection check aql UDF action context.
type CheckAqlUDFConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewCheckAqlUDFConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller check aql UDF action.
func NewCheckAqlUDFConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheckAqlUDFConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheckAqlUDFConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheckAqlUDFConnectionContext) OK(r bool) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CheckAqlUDFConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CheckAqlUDFConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *CheckAqlUDFConnectionContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CheckAqlUDFConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ConfigConnectionContext provides the connection config action context.
type ConfigConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewConfigConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller config action.
func NewConfigConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConfigConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConfigConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ConfigConnectionContext) OK(r map[string]*AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConfigConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConfigConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConfigConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ConfigConnectionContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// ConnectConnectionContext provides the connection connect action context.
type ConnectConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *ConnectConnectionPayload
}

// NewConnectConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller connect action.
func NewConnectConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConnectConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConnectConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// connectConnectionPayload is the connection connect action payload.
type connectConnectionPayload struct {
	// Database User's Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Database Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *connectConnectionPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// Publicize creates ConnectConnectionPayload from connectConnectionPayload
func (payload *connectConnectionPayload) Publicize() *ConnectConnectionPayload {
	var pub ConnectConnectionPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// ConnectConnectionPayload is the connection connect action payload.
type ConnectConnectionPayload struct {
	// Database User's Password
	Password string `form:"password" json:"password" xml:"password"`
	// Database Username
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *ConnectConnectionPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *ConnectConnectionContext) OK(r *AerospikeAmcConnectionTreeResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.tree.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConnectConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConnectConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ConnectConnectionContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConnectConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteConnectionContext provides the connection delete action context.
type DeleteConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewDeleteConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller delete action.
func NewDeleteConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteConnectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// EntitiesConnectionContext provides the connection entities action context.
type EntitiesConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewEntitiesConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller entities action.
func NewEntitiesConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*EntitiesConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := EntitiesConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *EntitiesConnectionContext) OK(r *AerospikeAmcConnectionTreeResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.tree.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *EntitiesConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *EntitiesConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *EntitiesConnectionContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *EntitiesConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetLogsConnectionContext provides the connection get logs action context.
type GetLogsConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewGetLogsConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller get logs action.
func NewGetLogsConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetLogsConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetLogsConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// LatencyConnectionContext provides the connection latency action context.
type LatencyConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Until  *int
}

// NewLatencyConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller latency action.
func NewLatencyConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp2 := from
			tmp1 := &tmp2
			rctx.From = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp4 := until
			tmp3 := &tmp4
			rctx.Until = tmp3
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyConnectionContext) OK(r []interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LogoutConnectionContext provides the connection logout action context.
type LogoutConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewLogoutConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller logout action.
func NewLogoutConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *LogoutConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LogoutConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *LogoutConnectionContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LogoutConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NamespacesConnectionContext provides the connection namespaces action context.
type NamespacesConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewNamespacesConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller namespaces action.
func NewNamespacesConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*NamespacesConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := NamespacesConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *NamespacesConnectionContext) OK(r map[string]*AerospikeAmcClusterNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *NamespacesConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *NamespacesConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *NamespacesConnectionContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *NamespacesConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// OverviewConnectionContext provides the connection overview action context.
type OverviewConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewOverviewConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller overview action.
func NewOverviewConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*OverviewConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := OverviewConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *OverviewConnectionContext) OK(r interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *OverviewConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *OverviewConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *OverviewConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryConnectionContext provides the connection query action context.
type QueryConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller query action.
func NewQueryConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryConnectionContext) OK(r []*AerospikeAmcConnectionQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// RegisterAqlUDFonTheServerConnectionContext provides the connection register aql UDF on the server action context.
type RegisterAqlUDFonTheServerConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewRegisterAqlUDFonTheServerConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller register aql UDF on the server action.
func NewRegisterAqlUDFonTheServerConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegisterAqlUDFonTheServerConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegisterAqlUDFonTheServerConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterAqlUDFonTheServerConnectionContext) OK(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegisterAqlUDFonTheServerConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RegisterAqlUDFonTheServerConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *RegisterAqlUDFonTheServerConnectionContext) NotAcceptable(r map[string]string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RegisterAqlUDFonTheServerConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveConnectionContext provides the connection save action context.
type SaveConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SaveConnectionPayload
}

// NewSaveConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller save action.
func NewSaveConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// saveConnectionPayload is the connection save action payload.
type saveConnectionPayload struct {
	// Connection Id
	ConnID *string `form:"connId,omitempty" json:"connId,omitempty" xml:"connId,omitempty"`
	// Should AMC connect to this cluster automatically after user login?
	ConnectOnLogin *bool `form:"connectOnLogin,omitempty" json:"connectOnLogin,omitempty" xml:"connectOnLogin,omitempty"`
	// Connection Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Seeds
	Seeds []*nodeSeed `form:"seeds,omitempty" json:"seeds,omitempty" xml:"seeds,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveConnectionPayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	if payload.ConnID != nil {
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, *payload.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.connId`, *payload.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates SaveConnectionPayload from saveConnectionPayload
func (payload *saveConnectionPayload) Publicize() *SaveConnectionPayload {
	var pub SaveConnectionPayload
	if payload.ConnID != nil {
		pub.ConnID = payload.ConnID
	}
	if payload.ConnectOnLogin != nil {
		pub.ConnectOnLogin = payload.ConnectOnLogin
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Seeds != nil {
		pub.Seeds = make([]*NodeSeed, len(payload.Seeds))
		for i2, elem2 := range payload.Seeds {
			pub.Seeds[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// SaveConnectionPayload is the connection save action payload.
type SaveConnectionPayload struct {
	// Connection Id
	ConnID *string `form:"connId,omitempty" json:"connId,omitempty" xml:"connId,omitempty"`
	// Should AMC connect to this cluster automatically after user login?
	ConnectOnLogin *bool `form:"connectOnLogin,omitempty" json:"connectOnLogin,omitempty" xml:"connectOnLogin,omitempty"`
	// Connection Name
	Name string `form:"name" json:"name" xml:"name"`
	// Seeds
	Seeds []*NodeSeed `form:"seeds" json:"seeds" xml:"seeds"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveConnectionPayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Seeds == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "seeds"))
	}
	if payload.ConnID != nil {
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, *payload.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.connId`, *payload.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	for _, e := range payload.Seeds {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SaveConnectionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveConnectionContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SetConfigConnectionContext provides the connection set config action context.
type SetConfigConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SetConfigConnectionPayload
}

// NewSetConfigConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller set config action.
func NewSetConfigConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetConfigConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetConfigConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// setConfigConnectionPayload is the connection set config action payload.
type setConfigConnectionPayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig,omitempty" json:"newConfig,omitempty" xml:"newConfig,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *setConfigConnectionPayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// Publicize creates SetConfigConnectionPayload from setConfigConnectionPayload
func (payload *setConfigConnectionPayload) Publicize() *SetConfigConnectionPayload {
	var pub SetConfigConnectionPayload
	if payload.NewConfig != nil {
		pub.NewConfig = payload.NewConfig
	}
	return &pub
}

// SetConfigConnectionPayload is the connection set config action payload.
type SetConfigConnectionPayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig" json:"newConfig" xml:"newConfig"`
}

// Validate runs the validation rules defined in the design.
func (payload *SetConfigConnectionPayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SetConfigConnectionContext) OK(r map[string]*AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetConfigConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetConfigConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SetConfigConnectionContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetConfigConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowConnectionContext provides the connection show action context.
type ShowConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewShowConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller show action.
func NewShowConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowConnectionContext) OK(r *AerospikeAmcConnectionResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputConnectionContext provides the connection throughput action context.
type ThroughputConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Until  *int
}

// NewThroughputConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller throughput action.
func NewThroughputConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp6 := from
			tmp5 := &tmp6
			rctx.From = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp8 := until
			tmp7 := &tmp8
			rctx.Until = tmp7
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputConnectionContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UserConnectionContext provides the connection user action context.
type UserConnectionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewUserConnectionContext parses the incoming request URL and body, performs validations and creates the
// context used by the connection controller user action.
func NewUserConnectionContext(ctx context.Context, r *http.Request, service *goa.Service) (*UserConnectionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UserConnectionContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UserConnectionContext) OK(r *AerospikeAmcClusterRoleResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.role.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UserConnectionContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UserConnectionContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UserConnectionContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateDbRoleContext provides the db-role create action context.
type CreateDbRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *CreateDbRolePayload
}

// NewCreateDbRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-role controller create action.
func NewCreateDbRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateDbRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateDbRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// createDbRolePayload is the db-role create action payload.
type createDbRolePayload struct {
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Valid database privileges
	Privileges []*privilege `form:"privileges,omitempty" json:"privileges,omitempty" xml:"privileges,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createDbRolePayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Privileges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "privileges"))
	}
	for _, e := range payload.Privileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates CreateDbRolePayload from createDbRolePayload
func (payload *createDbRolePayload) Publicize() *CreateDbRolePayload {
	var pub CreateDbRolePayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Privileges != nil {
		pub.Privileges = make([]*Privilege, len(payload.Privileges))
		for i2, elem2 := range payload.Privileges {
			pub.Privileges[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// CreateDbRolePayload is the db-role create action payload.
type CreateDbRolePayload struct {
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// Valid database privileges
	Privileges []*Privilege `form:"privileges" json:"privileges" xml:"privileges"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateDbRolePayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Privileges == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "privileges"))
	}
	for _, e := range payload.Privileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateDbRoleContext) OK(r *AerospikeAmcClusterRoleResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.role.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateDbRoleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateDbRoleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateDbRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteDbRoleContext provides the db-role delete action context.
type DeleteDbRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Role   string
}

// NewDeleteDbRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-role controller delete action.
func NewDeleteDbRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteDbRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteDbRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramRole := req.Params["role"]
	if len(paramRole) > 0 {
		rawRole := paramRole[0]
		rctx.Role = rawRole
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteDbRoleContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteDbRoleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteDbRoleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteDbRoleContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteDbRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryDbRoleContext provides the db-role query action context.
type QueryDbRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewQueryDbRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-role controller query action.
func NewQueryDbRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryDbRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryDbRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryDbRoleContext) OK(r []*AerospikeAmcClusterRoleResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryDbRoleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryDbRoleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryDbRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateDbRoleContext provides the db-role update action context.
type UpdateDbRoleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *UpdateDbRolePayload
}

// NewUpdateDbRoleContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-role controller update action.
func NewUpdateDbRoleContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDbRoleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDbRoleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// updateDbRolePayload is the db-role update action payload.
type updateDbRolePayload struct {
	// DB Privileges to be granted
	GrantPrivileges []*privilege `form:"grantPrivileges,omitempty" json:"grantPrivileges,omitempty" xml:"grantPrivileges,omitempty"`
	// Role name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// DB Privileges to be revoked
	RevokePrivileges []*privilege `form:"revokePrivileges,omitempty" json:"revokePrivileges,omitempty" xml:"revokePrivileges,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateDbRolePayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.GrantPrivileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range payload.RevokePrivileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// Publicize creates UpdateDbRolePayload from updateDbRolePayload
func (payload *updateDbRolePayload) Publicize() *UpdateDbRolePayload {
	var pub UpdateDbRolePayload
	if payload.GrantPrivileges != nil {
		pub.GrantPrivileges = make([]*Privilege, len(payload.GrantPrivileges))
		for i2, elem2 := range payload.GrantPrivileges {
			pub.GrantPrivileges[i2] = elem2.Publicize()
		}
	}
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.RevokePrivileges != nil {
		pub.RevokePrivileges = make([]*Privilege, len(payload.RevokePrivileges))
		for i2, elem2 := range payload.RevokePrivileges {
			pub.RevokePrivileges[i2] = elem2.Publicize()
		}
	}
	return &pub
}

// UpdateDbRolePayload is the db-role update action payload.
type UpdateDbRolePayload struct {
	// DB Privileges to be granted
	GrantPrivileges []*Privilege `form:"grantPrivileges,omitempty" json:"grantPrivileges,omitempty" xml:"grantPrivileges,omitempty"`
	// Role name
	Name string `form:"name" json:"name" xml:"name"`
	// DB Privileges to be revoked
	RevokePrivileges []*Privilege `form:"revokePrivileges,omitempty" json:"revokePrivileges,omitempty" xml:"revokePrivileges,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateDbRolePayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	for _, e := range payload.GrantPrivileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	for _, e := range payload.RevokePrivileges {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateDbRoleContext) OK(r *AerospikeAmcClusterRoleResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.role.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDbRoleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateDbRoleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateDbRoleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateDbUserContext provides the db-user create action context.
type CreateDbUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *CreateDbUserPayload
}

// NewCreateDbUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-user controller create action.
func NewCreateDbUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateDbUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateDbUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// createDbUserPayload is the db-user create action payload.
type createDbUserPayload struct {
	// Password. If Password is not provided, the user will be updated.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Database User Roles to be granted to the User
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
	// Database User Id
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createDbUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// Publicize creates CreateDbUserPayload from createDbUserPayload
func (payload *createDbUserPayload) Publicize() *CreateDbUserPayload {
	var pub CreateDbUserPayload
	if payload.Password != nil {
		pub.Password = *payload.Password
	}
	if payload.Roles != nil {
		pub.Roles = payload.Roles
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// CreateDbUserPayload is the db-user create action payload.
type CreateDbUserPayload struct {
	// Password. If Password is not provided, the user will be updated.
	Password string `form:"password" json:"password" xml:"password"`
	// Database User Roles to be granted to the User
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// Database User Id
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateDbUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Password == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "password"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateDbUserContext) OK(r *AerospikeAmcClusterUserResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.user.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateDbUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateDbUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateDbUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteDbUserContext provides the db-user delete action context.
type DeleteDbUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID   string
	Username string
}

// NewDeleteDbUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-user controller delete action.
func NewDeleteDbUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteDbUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteDbUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteDbUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteDbUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteDbUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteDbUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteDbUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryDbUserContext provides the db-user query action context.
type QueryDbUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewQueryDbUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-user controller query action.
func NewQueryDbUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryDbUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryDbUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryDbUserContext) OK(r []*AerospikeAmcClusterUserResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryDbUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryDbUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *QueryDbUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryDbUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowDbUserContext provides the db-user show action context.
type ShowDbUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID   string
	Username string
}

// NewShowDbUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-user controller show action.
func NewShowDbUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDbUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDbUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDbUserContext) OK(r *AerospikeAmcClusterUserResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.user.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDbUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowDbUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowDbUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowDbUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateDbUserContext provides the db-user update action context.
type UpdateDbUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *UpdateDbUserPayload
}

// NewUpdateDbUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the db-user controller update action.
func NewUpdateDbUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateDbUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateDbUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// updateDbUserPayload is the db-user update action payload.
type updateDbUserPayload struct {
	// Database User Roles to be granted to the User
	GrantRoles []string `form:"grantRoles,omitempty" json:"grantRoles,omitempty" xml:"grantRoles,omitempty"`
	// Password. If Password is not provided, the user will be updated.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Database User Roles to be revoked from the User
	RevokeRoles []string `form:"revokeRoles,omitempty" json:"revokeRoles,omitempty" xml:"revokeRoles,omitempty"`
	// Database User Id
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateDbUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	return
}

// Publicize creates UpdateDbUserPayload from updateDbUserPayload
func (payload *updateDbUserPayload) Publicize() *UpdateDbUserPayload {
	var pub UpdateDbUserPayload
	if payload.GrantRoles != nil {
		pub.GrantRoles = payload.GrantRoles
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.RevokeRoles != nil {
		pub.RevokeRoles = payload.RevokeRoles
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// UpdateDbUserPayload is the db-user update action payload.
type UpdateDbUserPayload struct {
	// Database User Roles to be granted to the User
	GrantRoles []string `form:"grantRoles,omitempty" json:"grantRoles,omitempty" xml:"grantRoles,omitempty"`
	// Password. If Password is not provided, the user will be updated.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Database User Roles to be revoked from the User
	RevokeRoles []string `form:"revokeRoles,omitempty" json:"revokeRoles,omitempty" xml:"revokeRoles,omitempty"`
	// Database User Id
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateDbUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateDbUserContext) OK(r *AerospikeAmcClusterUserResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.cluster.user.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateDbUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateDbUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateDbUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropIndexContext provides the index drop action context.
type DropIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Name    string
	Payload *DropIndexPayload
}

// NewDropIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller drop action.
func NewDropIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// dropIndexPayload is the index drop action payload.
type dropIndexPayload struct {
	// Index's Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Index's Set Name
	SetName *string `form:"setName,omitempty" json:"setName,omitempty" xml:"setName,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *dropIndexPayload) Validate() (err error) {
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	return
}

// Publicize creates DropIndexPayload from dropIndexPayload
func (payload *dropIndexPayload) Publicize() *DropIndexPayload {
	var pub DropIndexPayload
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.SetName != nil {
		pub.SetName = *payload.SetName
	}
	return &pub
}

// DropIndexPayload is the index drop action payload.
type DropIndexPayload struct {
	// Index's Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Index's Set Name
	SetName string `form:"setName" json:"setName" xml:"setName"`
}

// Validate runs the validation rules defined in the design.
func (payload *DropIndexPayload) Validate() (err error) {
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropIndexContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryIndexContext provides the index query action context.
type QueryIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID       string
	IncludeStats bool
}

// NewQueryIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller query action.
func NewQueryIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramIncludeStats := req.Params["includeStats"]
	if len(paramIncludeStats) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("includeStats"))
	} else {
		rawIncludeStats := paramIncludeStats[0]
		if includeStats, err2 := strconv.ParseBool(rawIncludeStats); err2 == nil {
			rctx.IncludeStats = includeStats
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("includeStats", rawIncludeStats, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryIndexContext) OK(r *AerospikeAmcIndexWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.index.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryIndexContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveIndexContext provides the index save action context.
type SaveIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SaveIndexPayload
}

// NewSaveIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller save action.
func NewSaveIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// saveIndexPayload is the index save action payload.
type saveIndexPayload struct {
	// Index's Bin name
	BinName *string `form:"binName,omitempty" json:"binName,omitempty" xml:"binName,omitempty"`
	// Index's Name
	IndexName *string `form:"indexName,omitempty" json:"indexName,omitempty" xml:"indexName,omitempty"`
	// Index's Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Index's Set name
	SetName *string `form:"setName,omitempty" json:"setName,omitempty" xml:"setName,omitempty"`
	// Index's type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveIndexPayload) Validate() (err error) {
	if payload.IndexName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "indexName"))
	}
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	if payload.BinName == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "binName"))
	}
	if payload.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if payload.Type != nil {
		if ok := goa.ValidatePattern(`(?i)[NUMERIC|STRING]`, *payload.Type); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, *payload.Type, `(?i)[NUMERIC|STRING]`))
		}
	}
	return
}

// Publicize creates SaveIndexPayload from saveIndexPayload
func (payload *saveIndexPayload) Publicize() *SaveIndexPayload {
	var pub SaveIndexPayload
	if payload.BinName != nil {
		pub.BinName = *payload.BinName
	}
	if payload.IndexName != nil {
		pub.IndexName = *payload.IndexName
	}
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.SetName != nil {
		pub.SetName = *payload.SetName
	}
	if payload.Type != nil {
		pub.Type = *payload.Type
	}
	return &pub
}

// SaveIndexPayload is the index save action payload.
type SaveIndexPayload struct {
	// Index's Bin name
	BinName string `form:"binName" json:"binName" xml:"binName"`
	// Index's Name
	IndexName string `form:"indexName" json:"indexName" xml:"indexName"`
	// Index's Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Index's Set name
	SetName string `form:"setName" json:"setName" xml:"setName"`
	// Index's type
	Type string `form:"type" json:"type" xml:"type"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveIndexPayload) Validate() (err error) {
	if payload.IndexName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "indexName"))
	}
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SetName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "setName"))
	}
	if payload.BinName == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "binName"))
	}
	if payload.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if ok := goa.ValidatePattern(`(?i)[NUMERIC|STRING]`, payload.Type); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, payload.Type, `(?i)[NUMERIC|STRING]`))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SaveIndexContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *SaveIndexContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowIndexContext provides the index show action context.
type ShowIndexContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewShowIndexContext parses the incoming request URL and body, performs validations and creates the
// context used by the index controller show action.
func NewShowIndexContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowIndexContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowIndexContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowIndexContext) OK(r *AerospikeAmcIndexWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.index.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowIndexContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowIndexContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowIndexContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LatencyLogicalNamespaceContext provides the logical-namespace latency action context.
type LatencyLogicalNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      int
	Namespace string
	Until     *int
}

// NewLatencyLogicalNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the logical-namespace controller latency action.
func NewLatencyLogicalNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyLogicalNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyLogicalNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("from"))
	} else {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			rctx.From = from
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp12 := until
			tmp11 := &tmp12
			rctx.Until = tmp11
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyLogicalNamespaceContext) OK(r []interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyLogicalNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyLogicalNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyLogicalNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *LatencyLogicalNamespaceContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// ShowLogicalNamespaceContext provides the logical-namespace show action context.
type ShowLogicalNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
}

// NewShowLogicalNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the logical-namespace controller show action.
func NewShowLogicalNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowLogicalNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowLogicalNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowLogicalNamespaceContext) OK(r *AerospikeAmcLogicalNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.logical.namespace.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowLogicalNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowLogicalNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ShowLogicalNamespaceContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowLogicalNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputLogicalNamespaceContext provides the logical-namespace throughput action context.
type ThroughputLogicalNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      int
	Namespace string
	Until     *int
}

// NewThroughputLogicalNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the logical-namespace controller throughput action.
func NewThroughputLogicalNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputLogicalNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputLogicalNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("from"))
	} else {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			rctx.From = from
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp15 := until
			tmp14 := &tmp15
			rctx.Until = tmp14
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputLogicalNamespaceContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputLogicalNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputLogicalNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputLogicalNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropModuleContext provides the module drop action context.
type DropModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewDropModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller drop action.
func NewDropModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropModuleContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryModuleContext provides the module query action context.
type QueryModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewQueryModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller query action.
func NewQueryModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryModuleContext) OK(r []*AerospikeAmcConnectionModulesResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryModuleContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveModuleContext provides the module save action context.
type SaveModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *SaveModulePayload
}

// NewSaveModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller save action.
func NewSaveModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// saveModulePayload is the module save action payload.
type saveModulePayload struct {
	// Module's Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Module's Source Code
	Source *string `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Module's type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveModulePayload) Validate() (err error) {
	if payload.Name == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Source == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Type == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if payload.Type != nil {
		if ok := goa.ValidatePattern(`(?i)LUA`, *payload.Type); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, *payload.Type, `(?i)LUA`))
		}
	}
	return
}

// Publicize creates SaveModulePayload from saveModulePayload
func (payload *saveModulePayload) Publicize() *SaveModulePayload {
	var pub SaveModulePayload
	if payload.Name != nil {
		pub.Name = *payload.Name
	}
	if payload.Source != nil {
		pub.Source = *payload.Source
	}
	if payload.Type != nil {
		pub.Type = *payload.Type
	}
	return &pub
}

// SaveModulePayload is the module save action payload.
type SaveModulePayload struct {
	// Module's Name
	Name string `form:"name" json:"name" xml:"name"`
	// Module's Source Code
	Source string `form:"source" json:"source" xml:"source"`
	// Module's type
	Type string `form:"type" json:"type" xml:"type"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveModulePayload) Validate() (err error) {
	if payload.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "name"))
	}
	if payload.Source == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "source"))
	}
	if payload.Type == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "type"))
	}
	if ok := goa.ValidatePattern(`(?i)LUA`, payload.Type); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.type`, payload.Type, `(?i)LUA`))
	}
	return
}

// OKFull sends a HTTP response with status code 200.
func (ctx *SaveModuleContext) OKFull(r *AerospikeAmcConnectionModulesResponseFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.modules.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *SaveModuleContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowModuleContext provides the module show action context.
type ShowModuleContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Name   string
}

// NewShowModuleContext parses the incoming request URL and body, performs validations and creates the
// context used by the module controller show action.
func NewShowModuleContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowModuleContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowModuleContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = rawName
	}
	return &rctx, err
}

// OKFull sends a HTTP response with status code 200.
func (ctx *ShowModuleContext) OKFull(r *AerospikeAmcConnectionModulesResponseFull) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.connection.modules.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowModuleContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowModuleContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowModuleContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ConfigNamespaceContext provides the namespace config action context.
type ConfigNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewConfigNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller config action.
func NewConfigNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConfigNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConfigNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ConfigNamespaceContext) OK(r *AerospikeAmcNamespaceConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.namespace.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConfigNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConfigNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConfigNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ConfigNamespaceContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// DropNamespaceContext provides the namespace drop action context.
type DropNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewDropNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller drop action.
func NewDropNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropNamespaceContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LatencyNamespaceContext provides the namespace latency action context.
type LatencyNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      *int
	Namespace string
	Node      string
	Until     *int
}

// NewLatencyNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller latency action.
func NewLatencyNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp17 := from
			tmp16 := &tmp17
			rctx.From = tmp16
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp19 := until
			tmp18 := &tmp19
			rctx.Until = tmp18
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyNamespaceContext) OK(r map[string]*AerospikeAmcLatencyResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *LatencyNamespaceContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// QueryNamespaceContext provides the namespace query action context.
type QueryNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewQueryNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller query action.
func NewQueryNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryNamespaceContext) OK(r map[string]*AerospikeAmcNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryNamespaceContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SetConfigNamespaceContext provides the namespace set config action context.
type SetConfigNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
	Payload   *SetConfigNamespacePayload
}

// NewSetConfigNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller set config action.
func NewSetConfigNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetConfigNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetConfigNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// setConfigNamespacePayload is the namespace set config action payload.
type setConfigNamespacePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig,omitempty" json:"newConfig,omitempty" xml:"newConfig,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *setConfigNamespacePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// Publicize creates SetConfigNamespacePayload from setConfigNamespacePayload
func (payload *setConfigNamespacePayload) Publicize() *SetConfigNamespacePayload {
	var pub SetConfigNamespacePayload
	if payload.NewConfig != nil {
		pub.NewConfig = payload.NewConfig
	}
	return &pub
}

// SetConfigNamespacePayload is the namespace set config action payload.
type SetConfigNamespacePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig" json:"newConfig" xml:"newConfig"`
}

// Validate runs the validation rules defined in the design.
func (payload *SetConfigNamespacePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SetConfigNamespaceContext) OK(r *AerospikeAmcNamespaceConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.namespace.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetConfigNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetConfigNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SetConfigNamespaceContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetConfigNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowNamespaceContext provides the namespace show action context.
type ShowNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewShowNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller show action.
func NewShowNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNamespaceContext) OK(r *AerospikeAmcNamespaceResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.namespace.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ShowNamespaceContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputNamespaceContext provides the namespace throughput action context.
type ThroughputNamespaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	From      *int
	Namespace string
	Node      string
	Until     *int
}

// NewThroughputNamespaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the namespace controller throughput action.
func NewThroughputNamespaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputNamespaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputNamespaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp21 := from
			tmp20 := &tmp21
			rctx.From = tmp20
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp23 := until
			tmp22 := &tmp23
			rctx.Until = tmp22
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputNamespaceContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputNamespaceContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputNamespaceContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputNamespaceContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ConfigNodeContext provides the node config action context.
type ConfigNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewConfigNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller config action.
func NewConfigNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ConfigNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ConfigNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ConfigNodeContext) OK(r *AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.node.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ConfigNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ConfigNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ConfigNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *ConfigNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// GetLogsNodeContext provides the node get logs action context.
type GetLogsNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewGetLogsNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller get logs action.
func NewGetLogsNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetLogsNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetLogsNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// JobsNodeContext provides the node jobs action context.
type JobsNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Limit     *int
	Node      string
	Offset    *int
	SortBy    *string
	SortOrder *string
	Status    *string
}

// NewJobsNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller jobs action.
func NewJobsNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*JobsNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := JobsNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) > 0 {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			tmp25 := limit
			tmp24 := &tmp25
			rctx.Limit = tmp24
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramOffset := req.Params["offset"]
	if len(paramOffset) > 0 {
		rawOffset := paramOffset[0]
		if offset, err2 := strconv.Atoi(rawOffset); err2 == nil {
			tmp27 := offset
			tmp26 := &tmp27
			rctx.Offset = tmp26
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("offset", rawOffset, "integer"))
		}
	}
	paramSortBy := req.Params["sortBy"]
	if len(paramSortBy) > 0 {
		rawSortBy := paramSortBy[0]
		rctx.SortBy = &rawSortBy
	}
	paramSortOrder := req.Params["sortOrder"]
	if len(paramSortOrder) > 0 {
		rawSortOrder := paramSortOrder[0]
		rctx.SortOrder = &rawSortOrder
		if rctx.SortOrder != nil {
			if ok := goa.ValidatePattern(`desc|asc`, *rctx.SortOrder); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`sortOrder`, *rctx.SortOrder, `desc|asc`))
			}
		}
	}
	paramStatus := req.Params["status"]
	if len(paramStatus) > 0 {
		rawStatus := paramStatus[0]
		rctx.Status = &rawStatus
		if rctx.Status != nil {
			if ok := goa.ValidatePattern(`in-progress|completed`, *rctx.Status); !ok {
				err = goa.MergeErrors(err, goa.InvalidPatternError(`status`, *rctx.Status, `in-progress|completed`))
			}
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *JobsNodeContext) OK(r *AerospikeAmcJobResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.job.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *JobsNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *JobsNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *JobsNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *JobsNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// KillJobNodeContext provides the node kill-job action context.
type KillJobNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Module string
	Node   string
	Trid   string
}

// NewKillJobNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller kill-job action.
func NewKillJobNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*KillJobNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := KillJobNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramModule := req.Params["module"]
	if len(paramModule) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("module"))
	} else {
		rawModule := paramModule[0]
		rctx.Module = rawModule
		if ok := goa.ValidatePattern(`scan|query`, rctx.Module); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`module`, rctx.Module, `scan|query`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramTrid := req.Params["trid"]
	if len(paramTrid) > 0 {
		rawTrid := paramTrid[0]
		rctx.Trid = rawTrid
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *KillJobNodeContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *KillJobNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *KillJobNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *KillJobNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *KillJobNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// LatencyNodeContext provides the node latency action context.
type LatencyNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Node   string
	Until  *int
}

// NewLatencyNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller latency action.
func NewLatencyNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*LatencyNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LatencyNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp29 := from
			tmp28 := &tmp29
			rctx.From = tmp28
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp31 := until
			tmp30 := &tmp31
			rctx.Until = tmp30
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LatencyNodeContext) OK(r map[string]*AerospikeAmcLatencyResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LatencyNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *LatencyNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LatencyNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *LatencyNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// SetConfigNodeContext provides the node set config action context.
type SetConfigNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Node    string
	Payload *SetConfigNodePayload
}

// NewSetConfigNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller set config action.
func NewSetConfigNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetConfigNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetConfigNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// setConfigNodePayload is the node set config action payload.
type setConfigNodePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig,omitempty" json:"newConfig,omitempty" xml:"newConfig,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *setConfigNodePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// Publicize creates SetConfigNodePayload from setConfigNodePayload
func (payload *setConfigNodePayload) Publicize() *SetConfigNodePayload {
	var pub SetConfigNodePayload
	if payload.NewConfig != nil {
		pub.NewConfig = payload.NewConfig
	}
	return &pub
}

// SetConfigNodePayload is the node set config action payload.
type SetConfigNodePayload struct {
	// New config parameters
	NewConfig map[string]string `form:"newConfig" json:"newConfig" xml:"newConfig"`
}

// Validate runs the validation rules defined in the design.
func (payload *SetConfigNodePayload) Validate() (err error) {
	if payload.NewConfig == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "newConfig"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SetConfigNodeContext) OK(r *AerospikeAmcNodeConfigResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.node.config.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetConfigNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetConfigNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SetConfigNodeContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetConfigNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SetJobPriorityNodeContext provides the node set-job-priority action context.
type SetJobPriorityNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID   string
	Module   string
	Node     string
	Priority string
	Trid     string
}

// NewSetJobPriorityNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller set-job-priority action.
func NewSetJobPriorityNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetJobPriorityNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetJobPriorityNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramModule := req.Params["module"]
	if len(paramModule) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("module"))
	} else {
		rawModule := paramModule[0]
		rctx.Module = rawModule
		if ok := goa.ValidatePattern(`scan|query`, rctx.Module); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`module`, rctx.Module, `scan|query`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramPriority := req.Params["priority"]
	if len(paramPriority) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("priority"))
	} else {
		rawPriority := paramPriority[0]
		rctx.Priority = rawPriority
		if ok := goa.ValidatePattern(`low|medium|high`, rctx.Priority); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`priority`, rctx.Priority, `low|medium|high`))
		}
	}
	paramTrid := req.Params["trid"]
	if len(paramTrid) > 0 {
		rawTrid := paramTrid[0]
		rctx.Trid = rawTrid
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SetJobPriorityNodeContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetJobPriorityNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetJobPriorityNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetJobPriorityNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// NotImplemented sends a HTTP response with status code 501.
func (ctx *SetJobPriorityNodeContext) NotImplemented(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 501, r)
}

// ShowNodeContext provides the node show action context.
type ShowNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	Node   string
}

// NewShowNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller show action.
func NewShowNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNodeContext) OK(r map[string]*AerospikeAmcNodeResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SwitchXDRNodeContext provides the node switch XDR action context.
type SwitchXDRNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Node    string
	Payload *SwitchXDRNodePayload
}

// NewSwitchXDRNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller switch XDR action.
func NewSwitchXDRNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*SwitchXDRNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SwitchXDRNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// switchXDRNodePayload is the node switch XDR action payload.
type switchXDRNodePayload struct {
	// New XDR state. Should be either ON or OFF
	State *string `form:"state,omitempty" json:"state,omitempty" xml:"state,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *switchXDRNodePayload) Validate() (err error) {
	if payload.State == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "state"))
	}
	if payload.State != nil {
		if ok := goa.ValidatePattern(`(?i)[ON|OFF]`, *payload.State); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.state`, *payload.State, `(?i)[ON|OFF]`))
		}
	}
	return
}

// Publicize creates SwitchXDRNodePayload from switchXDRNodePayload
func (payload *switchXDRNodePayload) Publicize() *SwitchXDRNodePayload {
	var pub SwitchXDRNodePayload
	if payload.State != nil {
		pub.State = *payload.State
	}
	return &pub
}

// SwitchXDRNodePayload is the node switch XDR action payload.
type SwitchXDRNodePayload struct {
	// New XDR state. Should be either ON or OFF
	State string `form:"state" json:"state" xml:"state"`
}

// Validate runs the validation rules defined in the design.
func (payload *SwitchXDRNodePayload) Validate() (err error) {
	if payload.State == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "state"))
	}
	if ok := goa.ValidatePattern(`(?i)[ON|OFF]`, payload.State); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.state`, payload.State, `(?i)[ON|OFF]`))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SwitchXDRNodeContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SwitchXDRNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SwitchXDRNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotAcceptable sends a HTTP response with status code 406.
func (ctx *SwitchXDRNodeContext) NotAcceptable(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 406, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SwitchXDRNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ThroughputNodeContext provides the node throughput action context.
type ThroughputNodeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	From   *int
	Node   string
	Until  *int
}

// NewThroughputNodeContext parses the incoming request URL and body, performs validations and creates the
// context used by the node controller throughput action.
func NewThroughputNodeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ThroughputNodeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ThroughputNodeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramFrom := req.Params["from"]
	if len(paramFrom) > 0 {
		rawFrom := paramFrom[0]
		if from, err2 := strconv.Atoi(rawFrom); err2 == nil {
			tmp33 := from
			tmp32 := &tmp33
			rctx.From = tmp32
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("from", rawFrom, "integer"))
		}
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramUntil := req.Params["until"]
	if len(paramUntil) > 0 {
		rawUntil := paramUntil[0]
		if until, err2 := strconv.Atoi(rawUntil); err2 == nil {
			tmp35 := until
			tmp34 := &tmp35
			rctx.Until = tmp34
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("until", rawUntil, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ThroughputNodeContext) OK(r *AerospikeAmcThroughputWrapperResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.throughput.wrapper.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ThroughputNodeContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ThroughputNodeContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ThroughputNodeContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryNotificationContext provides the notification query action context.
type QueryNotificationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
	LastID *int
}

// NewQueryNotificationContext parses the incoming request URL and body, performs validations and creates the
// context used by the notification controller query action.
func NewQueryNotificationContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryNotificationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryNotificationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramLastID := req.Params["lastId"]
	if len(paramLastID) > 0 {
		rawLastID := paramLastID[0]
		if lastID, err2 := strconv.Atoi(rawLastID); err2 == nil {
			tmp37 := lastID
			tmp36 := &tmp37
			rctx.LastID = tmp36
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("lastId", rawLastID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryNotificationContext) OK(r *AerospikeAmcNotificationResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.notification.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryNotificationContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryNotificationContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryNotificationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateRestoreContext provides the restore create action context.
type CreateRestoreContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID  string
	Payload *CreateRestorePayload
}

// NewCreateRestoreContext parses the incoming request URL and body, performs validations and creates the
// context used by the restore controller create action.
func NewCreateRestoreContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateRestoreContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateRestoreContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// createRestorePayload is the restore create action payload.
type createRestorePayload struct {
	// Indicates whether the restore should only update records with smaller generation number
	IgnoreGenerationNumber *bool `form:"IgnoreGenerationNumber,omitempty" json:"IgnoreGenerationNumber,omitempty" xml:"IgnoreGenerationNumber,omitempty"`
	// Indicates whether to restore records which do not exist on the cluster only
	MissingRecordsOnly *bool `form:"MissingRecordsOnly,omitempty" json:"MissingRecordsOnly,omitempty" xml:"MissingRecordsOnly,omitempty"`
	// SSH user's password
	SSHPassword *string `form:"SSHPassword,omitempty" json:"SSHPassword,omitempty" xml:"SSHPassword,omitempty"`
	// SSH User
	SSHUser *string `form:"SSHUser,omitempty" json:"SSHUser,omitempty" xml:"SSHUser,omitempty"`
	// Number of working threads.
	Threads *int `form:"Threads,omitempty" json:"Threads,omitempty" xml:"Threads,omitempty"`
	// Namespace
	Namespace *string `form:"namespace,omitempty" json:"namespace,omitempty" xml:"namespace,omitempty"`
	// Host on which the backup file is located
	SourceAddress *string `form:"sourceAddress,omitempty" json:"sourceAddress,omitempty" xml:"sourceAddress,omitempty"`
	// Host on which the backup file is located
	SourcePath *string `form:"sourcePath,omitempty" json:"sourcePath,omitempty" xml:"sourcePath,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createRestorePayload) Validate() (err error) {
	if payload.Namespace == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SourceAddress == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sourceAddress"))
	}
	if payload.SourcePath == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sourcePath"))
	}
	if payload.Threads == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Threads"))
	}
	if payload.SSHUser == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHUser"))
	}
	if payload.SSHPassword == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHPassword"))
	}
	if payload.MissingRecordsOnly == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "MissingRecordsOnly"))
	}
	if payload.IgnoreGenerationNumber == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "IgnoreGenerationNumber"))
	}
	return
}

// Publicize creates CreateRestorePayload from createRestorePayload
func (payload *createRestorePayload) Publicize() *CreateRestorePayload {
	var pub CreateRestorePayload
	if payload.IgnoreGenerationNumber != nil {
		pub.IgnoreGenerationNumber = *payload.IgnoreGenerationNumber
	}
	if payload.MissingRecordsOnly != nil {
		pub.MissingRecordsOnly = *payload.MissingRecordsOnly
	}
	if payload.SSHPassword != nil {
		pub.SSHPassword = *payload.SSHPassword
	}
	if payload.SSHUser != nil {
		pub.SSHUser = *payload.SSHUser
	}
	if payload.Threads != nil {
		pub.Threads = *payload.Threads
	}
	if payload.Namespace != nil {
		pub.Namespace = *payload.Namespace
	}
	if payload.SourceAddress != nil {
		pub.SourceAddress = *payload.SourceAddress
	}
	if payload.SourcePath != nil {
		pub.SourcePath = *payload.SourcePath
	}
	return &pub
}

// CreateRestorePayload is the restore create action payload.
type CreateRestorePayload struct {
	// Indicates whether the restore should only update records with smaller generation number
	IgnoreGenerationNumber bool `form:"IgnoreGenerationNumber" json:"IgnoreGenerationNumber" xml:"IgnoreGenerationNumber"`
	// Indicates whether to restore records which do not exist on the cluster only
	MissingRecordsOnly bool `form:"MissingRecordsOnly" json:"MissingRecordsOnly" xml:"MissingRecordsOnly"`
	// SSH user's password
	SSHPassword string `form:"SSHPassword" json:"SSHPassword" xml:"SSHPassword"`
	// SSH User
	SSHUser string `form:"SSHUser" json:"SSHUser" xml:"SSHUser"`
	// Number of working threads.
	Threads int `form:"Threads" json:"Threads" xml:"Threads"`
	// Namespace
	Namespace string `form:"namespace" json:"namespace" xml:"namespace"`
	// Host on which the backup file is located
	SourceAddress string `form:"sourceAddress" json:"sourceAddress" xml:"sourceAddress"`
	// Host on which the backup file is located
	SourcePath string `form:"sourcePath" json:"sourcePath" xml:"sourcePath"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateRestorePayload) Validate() (err error) {
	if payload.Namespace == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "namespace"))
	}
	if payload.SourceAddress == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sourceAddress"))
	}
	if payload.SourcePath == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "sourcePath"))
	}

	if payload.SSHUser == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHUser"))
	}
	if payload.SSHPassword == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "SSHPassword"))
	}

	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateRestoreContext) OK(r *AerospikeAmcRestoreResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.restore.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateRestoreContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateRestoreContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateRestoreContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ProgressRestoreContext provides the restore progress action context.
type ProgressRestoreContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID string
}

// NewProgressRestoreContext parses the incoming request URL and body, performs validations and creates the
// context used by the restore controller progress action.
func NewProgressRestoreContext(ctx context.Context, r *http.Request, service *goa.Service) (*ProgressRestoreContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ProgressRestoreContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ProgressRestoreContext) OK(r *AerospikeAmcRestoreResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.restore.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ProgressRestoreContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ProgressRestoreContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ProgressRestoreContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ProgressRestoreContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DropSetContext provides the set drop action context.
type DropSetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
	SetName   string
}

// NewDropSetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller drop action.
func NewDropSetContext(ctx context.Context, r *http.Request, service *goa.Service) (*DropSetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DropSetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramSetName := req.Params["setName"]
	if len(paramSetName) > 0 {
		rawSetName := paramSetName[0]
		rctx.SetName = rawSetName
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DropSetContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DropSetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DropSetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DropSetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QuerySetContext provides the set query action context.
type QuerySetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
}

// NewQuerySetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller query action.
func NewQuerySetContext(ctx context.Context, r *http.Request, service *goa.Service) (*QuerySetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QuerySetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QuerySetContext) OK(r []*AerospikeAmcSetResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QuerySetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QuerySetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QuerySetContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QuerySetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowSetContext provides the set show action context.
type ShowSetContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ConnID    string
	Namespace string
	Node      string
	SetName   string
}

// NewShowSetContext parses the incoming request URL and body, performs validations and creates the
// context used by the set controller show action.
func NewShowSetContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSetContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSetContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramConnID := req.Params["connId"]
	if len(paramConnID) > 0 {
		rawConnID := paramConnID[0]
		rctx.ConnID = rawConnID
		if ok := goa.ValidatePattern(`[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`, rctx.ConnID); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`connId`, rctx.ConnID, `[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}`))
		}
	}
	paramNamespace := req.Params["namespace"]
	if len(paramNamespace) > 0 {
		rawNamespace := paramNamespace[0]
		rctx.Namespace = rawNamespace
	}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	paramSetName := req.Params["setName"]
	if len(paramSetName) > 0 {
		rawSetName := paramSetName[0]
		rctx.SetName = rawSetName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSetContext) OK(r *AerospikeAmcSetResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.set.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSetContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowSetContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSetContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteUserContext provides the user delete action context.
type DeleteUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewDeleteUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller delete action.
func NewDeleteUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteUserContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// GetUserContext provides the user get action context.
type GetUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Username string
}

// NewGetUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller get action.
func NewGetUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUsername := req.Params["username"]
	if len(paramUsername) > 0 {
		rawUsername := paramUsername[0]
		rctx.Username = rawUsername
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetUserContext) OK(r *AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.user.query.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryUserContext provides the user query action context.
type QueryUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller query action.
func NewQueryUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryUserContext) OK(r []*AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// SaveUserContext provides the user save action context.
type SaveUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SaveUserPayload
}

// NewSaveUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller save action.
func NewSaveUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*SaveUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SaveUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// saveUserPayload is the user save action payload.
type saveUserPayload struct {
	// User account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// User's fullname
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Additional Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Valid roles are: admin, ops, dev
	Roles []string `form:"roles,omitempty" json:"roles,omitempty" xml:"roles,omitempty"`
	// AMC User Id
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *saveUserPayload) Validate() (err error) {
	if payload.Username == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// Publicize creates SaveUserPayload from saveUserPayload
func (payload *saveUserPayload) Publicize() *SaveUserPayload {
	var pub SaveUserPayload
	if payload.Active != nil {
		pub.Active = payload.Active
	}
	if payload.FullName != nil {
		pub.FullName = payload.FullName
	}
	if payload.Notes != nil {
		pub.Notes = payload.Notes
	}
	if payload.Password != nil {
		pub.Password = payload.Password
	}
	if payload.Roles != nil {
		pub.Roles = payload.Roles
	}
	if payload.Username != nil {
		pub.Username = *payload.Username
	}
	return &pub
}

// SaveUserPayload is the user save action payload.
type SaveUserPayload struct {
	// User account is active
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
	// User's fullname
	FullName *string `form:"fullName,omitempty" json:"fullName,omitempty" xml:"fullName,omitempty"`
	// Additional Notes
	Notes *string `form:"notes,omitempty" json:"notes,omitempty" xml:"notes,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// Valid roles are: admin, ops, dev
	Roles []string `form:"roles" json:"roles" xml:"roles"`
	// AMC User Id
	Username string `form:"username" json:"username" xml:"username"`
}

// Validate runs the validation rules defined in the design.
func (payload *SaveUserPayload) Validate() (err error) {
	if payload.Username == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "username"))
	}
	if payload.Roles == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "roles"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *SaveUserContext) OK(r *AerospikeAmcUserQueryResponse) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.aerospike.amc.user.query.response+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SaveUserContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SaveUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SaveUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// QueryXdrContext provides the xdr query action context.
type QueryXdrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewQueryXdrContext parses the incoming request URL and body, performs validations and creates the
// context used by the xdr controller query action.
func NewQueryXdrContext(ctx context.Context, r *http.Request, service *goa.Service) (*QueryXdrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := QueryXdrContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *QueryXdrContext) OK(r interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *QueryXdrContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *QueryXdrContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *QueryXdrContext) Forbidden() error {
	ctx.ResponseData.WriteHeader(403)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *QueryXdrContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowXdrContext provides the xdr show action context.
type ShowXdrContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Node string
}

// NewShowXdrContext parses the incoming request URL and body, performs validations and creates the
// context used by the xdr controller show action.
func NewShowXdrContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowXdrContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowXdrContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramNode := req.Params["node"]
	if len(paramNode) > 0 {
		rawNode := paramNode[0]
		rctx.Node = rawNode
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowXdrContext) OK(r interface{}) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowXdrContext) BadRequest(r string) error {
	ctx.ResponseData.Header().Set("Content-Type", "")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowXdrContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowXdrContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
